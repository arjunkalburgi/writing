{"hash":"c7c6c3807120864d58ef7da835db316022afe7ce","data":{"post":{"id":"e6c458c221db6af936942c4dc5326e5c","title":"Creating a Variable Design System","content":"<blockquote>\n<p>The brief for this project is to create an Ionic app that can be re-themed based on different brands.</p>\n</blockquote>\n<p>Should be a fun little project indeed. The idea is to expand on Ionic Framework's existing <code class=\"language-text\">variables.scss</code> to feature colours, fonts, opacities, shadows, radii and maybe even spacing. Then in a build process, reconfigure file/(s) so that the app is built with different variables.</p>\n<h3 id=\"step-1-design-tokens\"><a href=\"#step-1-design-tokens\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 1: Design Tokens</h3>\n<p>I found <a href=\"https://www.lightningdesignsystem.com/design-tokens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this great guideline</a> from Salesforce that features all their design tokens. To be frank, it's a lot and I'm not sure I need it all. There's so much just in colours alone that I decided to look at some brands as well as my app so I could determine what would be necessary and not.</p>\n<ol>\n<li>\n<p>Colours\nMain brand colour</p>\n<p>Alt brand colour</p>\n<p>Dark (Black equivalent)</p>\n<p>Light (White equivalent)</p>\n<p>Main brand colour accessible with dark</p>\n<p>Main brand colour accessible with light</p>\n<p>Main brand colour accessible with alt</p>\n<p>Alt brand colour accessible with dark</p>\n<p>Alt brand colour accessible with light</p>\n<p>Alt brand colour accessible with main</p>\n<p>Light background colour</p>\n<p>Gray text accessible on white</p>\n<p>Gray text accessible on light background colour</p>\n<p>Gray text accessible on Alt brand colour accessible with main</p>\n</li>\n<li>Custom button style</li>\n<li>Border radius style</li>\n<li>Side spacing</li>\n<li>Font/sizes:\nsmallbold\nsmall\nregular\nsubtitle\ntitle\nheader</li>\n<li>Shadows\nheader shadow (global.scss:177)\nbutton shadow</li>\n</ol>\n<p>There are some other properties I could encorporate, but I'll start with these 6 tokens for now.</p>\n<h3 id=\"step-2-using-the-tokens\"><a href=\"#step-2-using-the-tokens\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 2: Using the Tokens</h3>\n<p>Now that I have my tokens, I need to update my app to use them. From there I'll be able to change the tokens for each brand, and apply them to the app.</p>\n<p>This is actually the most difficult/time-consuming part of the process because it involved looking into each and every existing colour variable reference to ensure proper accessibility. The other tokens also required individual checking to find values that were not made into variables. It took a couple days to complete.</p>\n<p>As I did this I also made a custom <code class=\"language-text\">.scss</code> file for each theme where I could keep new styles that are specific to a certain theme (adjusted layouts or button configurations).</p>\n<h3 id=\"step-3-repo-re-organization\"><a href=\"#step-3-repo-re-organization\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 3: Repo Re-Organization</h3>\n<p>I'll be using some npm scripts in order to move around finds before running my code. This was probably not the best method (that'd be using Gulp), but the easiest to implement. </p>\n<p>Here is an example of my <code class=\"language-text\">package.json</code>'s npm scripts: </p>\n<div class=\"gridsome-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;serve:generic&quot;: &quot;npm run generic &amp;&amp; ionic serve&quot;,\n&quot;generic&quot;: &quot;npm run generic:retailer &amp;&amp; npm run generic:assets &amp;&amp; npm run generic:theme&quot;,\n&quot;generic:retailer&quot;: &quot;copyfiles -au 3 \\&quot;.retailer/generic/app/**/*\\&quot; src/app&quot;,\n&quot;generic:assets&quot;: &quot;copyfiles -au 3 \\&quot;.retailer/generic/assets/**/*\\&quot; src/assets&quot;,\n&quot;generic:theme&quot;: &quot;copyfiles -au 2 .retailer/generic/theme/*.scss src&quot;,</code></pre></div>\n<p>As you can see all I'm doing is moving files from a hidden folder (so it doesn't get included in build) and using <a href=\"https://github.com/calvinmetcalf/copyfiles\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">copyfiles</a> to move and replace the files.</p>\n<p>So now all I need to do to change my app's theme is to run <code class=\"language-text\">npm run serve:theme_name</code> and it'll completely change the app to a custom stream I've created.</p>\n<h3 id=\"results-and-comments\"><a href=\"#results-and-comments\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Results and Comments</h3>\n<p>Using this method for a couple weeks has been awesome. The custom <code class=\"language-text\">.scss</code> file has come in handy several times and the theme switching has worked will. </p>\n<p>The biggest problem I've had however is maintainence and new features. Making edits to sections of the copied files means making edits to the files of each theme instance, it adds up to a lot of edits. It requires careful attention to ensure that the new edits/features work for each theme - something that's a bit unruly in practice but is managable when not rushing.</p>\n<p>Overall this is a really cool way to extend a single codebase for multiple clients.</p>\n","date":"January 18, 2020","timeToRead":3,"description":"The brief for this project is to create an Ionic app that can be re-themed based on different brands.","image":""}},"context":{}}