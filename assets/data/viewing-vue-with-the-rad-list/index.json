{"hash":"100476c7da99d2b5ab4e150498665f47f0f62785","data":{"post":{"id":"9b52bfba2ca5a9cb7f15659b69fd32bd","title":"Viewing Vue with TheRadList","content":"<blockquote>\n<p>Learning Vue.js by updating one of my more simpler projects, TheRadList, the Edmonton restaurant webapp that restores the excitement of finding a place to grub.</p>\n</blockquote>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Whk_KRBeoqPW-cYg\"></p>\n<h3 id=\"objective\"><a href=\"#objective\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Objective</h3>\n<p>TheRadList is a project I started in January of 2018. Every once in a while I’ll bring it back to update it or use it to learn something new.</p>\n<p>Here’s the total history of TheRadList updates:</p>\n<ul>\n<li><a href=\"https://medium.com/arjunkalburgi/im-more-lazy-than-you-backends-with-google-spreadsheets-3eeac8d135c1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Update so that my friends can easily modify content</a></li>\n<li><a href=\"https://github.com/theradlist/angular-radlist\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Update to learn Angular 5</a></li>\n<li><a href=\"https://medium.com/arjunkalburgi/theradlist-a-new-side-product-e07bf0d3fdd8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Initial launch of the project</a></li>\n</ul>\n<p>Now I’m using it to learn <a href=\"https://vuejs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js</a>, one of today’s most popular web frameworks.</p>\n<h3 id=\"learning-vue\"><a href=\"#learning-vue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Learning Vue</h3>\n<p>Learning a new framework isn’t too difficult, since a lot of them take concepts from each other and most have great learning tools online.</p>\n<p>The first thing I did was go to the <a href=\"https://vuejs.org/v2/guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue.js docs</a> to see what I could learn. There I found a video series from <a href=\"https://www.vuemastery.com/courses/intro-to-vue-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue Mastery called “Intro to Vue.js”</a> which covers all the core principles of Vue.js and also builds a sample app along with you.</p>\n<p>I didn’t bother with the sample app, because TheRadList is my sample app.</p>\n<h3 id=\"planning-my-architecture\"><a href=\"#planning-my-architecture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Planning my Architecture</h3>\n<p>After picking up all the core concepts and functionality of Vue.js, I looked at TheRadList’s HTML to see how I could refactor and update it with Vue.js.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*SVkBXGeYCdj6H6fw\"></p>\n<p>I know that the App Component needs to get <a href=\"https://vuejs.org/v2/guide/components.html#Emitting-a-Value-With-an-Event\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">emitted messages</a> from the Filter Component, which will then update the List Component via <a href=\"https://vuejs.org/v2/guide/components-props.html#One-Way-Data-Flow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">props</a>.</p>\n<p>If possible, I also want to make my filter functions capable of filtering through multiple properties. But that’s more of a stretch goal.</p>\n<h3 id=\"building-out-my-app\"><a href=\"#building-out-my-app\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Building out my App</h3>\n<p>Refactoring should always be done incrementally and that’s essentially what this process is.</p>\n<p>I began with creating components and slowly turning them into what I needed, using the documentation and the videos from the core principles course as a reference.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*h0h--08SQGxQUkJGg2uzXQ.png\" alt=\"Git commits tracking my incremental progress\">\nGit commits tracking my incremental progress</p>\n<p>Slowly but surely I replaced all the functionality of the previous website. Starting with the component for the top hero section, then the component for the filter section and finally the rad list itself.</p>\n<h3 id=\"comments-and-improvements\"><a href=\"#comments-and-improvements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Comments and Improvements</h3>\n<p>It’s always great to document the things you learned and the things you can do better. Something that can nearly always be improved in the components and how they work together.</p>\n<h4 id=\"more-components\"><a href=\"#more-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>More Components</h4>\n<p>It’s possible more components might be helpful, especially the for UI. For example each filter in the Filter Component can be its own component, this would mean more component-oriented CSS, helpful for designers and developers both.</p>\n<h4 id=\"component-efficiency\"><a href=\"#component-efficiency\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Component Efficiency</h4>\n<p>Inner-component structure is another way to improve your app. I updated how the filter-props (props that control the list filters) were passed into the List Component, yielding a much more readable approach that’s also good for performance. (the <code class=\"language-text\">watch</code> function is slow)</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/600/1*j5_TYqnW1RSfIW9R_7WiWw.png\">\n<img src=\"https://cdn-images-1.medium.com/max/600/1*WDLgd9EwIyG0jQELpGQV5Q.png\" alt=\"Updating List Component to take in 1 prop for all the filters\"></p>\n<blockquote>\n<p>Updating List Component to take in 1 prop for all the filters</p>\n</blockquote>\n<h4 id=\"arrow-function-quirkiness\"><a href=\"#arrow-function-quirkiness\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Arrow Function Quirkiness</h4>\n<p>Took me quite a while to figure out why my watch function wasn’t working when trying to watch for when the user toggles the “Deep Dive” view.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>  \n     <span class=\"token function-variable function\">expand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal<span class=\"token punctuation\">,</span> oldVal</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expanded <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newVal<span class=\"token operator\">==</span><span class=\"token string\">\"large\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>According to <a href=\"https://stackoverflow.com/a/40557674\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StackOverflow</a>, it’s simply because arrow functions (<code class=\"language-text\">()=&gt;{}</code>) don’t take in bindings for <code class=\"language-text\">this</code>. In other words, <code class=\"language-text\">this</code> doesn’t work inside them! Just reverting back to regular function syntax fixed the problem. A good lesson.</p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>  \n     <span class=\"token function\">expand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal<span class=\"token punctuation\">,</span> oldVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expanded <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newVal<span class=\"token operator\">==</span><span class=\"token string\">\"large\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"single-file-components\"><a href=\"#single-file-components\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Single File Components</h4>\n<p>Something I’d love to get to are <a href=\"https://vuejs.org/v2/guide/single-file-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue’s Single File Components</a>, making Vue projects further like Angular and React with separation of concerns.</p>\n<p>For a simple app like TheRadList, I didn’t see a point in adding this functionality, so instead I separated out my components into files. It helps with readability abstraction but isn’t nearly as beneficial as Single File Components themselves.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1200/0*9mbSlucUkIF34qBA\"></p>\n<h3 id=\"results\"><a href=\"#results\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Results</h3>\n<p>You can visit TheRadList at <a href=\"http://www.theradlist.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">www.theradlist.com</a>, but you won’t see any difference (other than a few style bug fixes I found). But now you’ll know that the site uses Vue.js!</p>\n<p>Tell me how it is via <a href=\"http://twitter.com/askalburgi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a> or <a href=\"https://www.linkedin.com/in/arjun-kalburgi-82b25058/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LinkedIn</a>!</p>\n","date":"April 16, 2019","timeToRead":3,"cover":null,"description":"Learning Vue.js by updating one of my more simpler projects, TheRadList, the Edmonton restaurant webapp that restores the excitement of…"}},"context":{}}