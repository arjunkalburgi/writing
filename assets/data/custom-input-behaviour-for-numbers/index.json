{"hash":"0d4a5b7d8aa3c7e789dc59979f0b7d2fd61309ff","data":{"post":{"id":"b7596d224765614df88a0b9f065667a7","title":"Custom Input Behaviour for Numbers","content":"<blockquote>\n<p>After accomplishing this twice now on two different occasions, I want to note it down for future reference. I think this is pretty core functionality for number inputs.</p>\n</blockquote>\n<p>When you type into a currency field, the field should adapt and reflect your text input. The experience is much cleaner if you're only ever typing numbers. </p>\n<p>Thus this: </p>\n<div class=\"gridsome-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// First, remove any '$' or decimals.</span>\n<span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vallen <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>length\n\n<span class=\"token comment\">// Ensure it is a number</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n   <span class=\"token comment\">// Add a 0 for edge case to ensure: \"$0.04\"</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vallen <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> val <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  \n   <span class=\"token comment\">// Add the decimal to the correct place</span>\n   <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> vallen <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>vallen <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> vallen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Clean up float and add back '$'</span>\n   output <span class=\"token operator\">=</span> <span class=\"token string\">'$'</span> <span class=\"token operator\">+</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now that I'm writing this, it seems like the line for the fourth comment is redundant. Why am I adding a decimal and then cleaning up the float value? Shouldn't <code class=\"language-text\">parseFloat(output).toFixed(2)</code> do all the right work? </p>\n<p>But that step is required to ensure the differences between <code class=\"language-text\">&#39;0.04&#39;</code> and <code class=\"language-text\">0.40</code> and <code class=\"language-text\">4.00</code> are all taken care of. :smile: </p>\n<p>It's actually the final line where the redundancy comes. I use <code class=\"language-text\">parseFloat</code> for the case of <code class=\"language-text\">00.040</code> where there maybe extra zeros present. And  <code class=\"language-text\">toFixed(2)</code> is for the case when <code class=\"language-text\">6.00</code> simplifies to <code class=\"language-text\">6</code>. </p>\n<p>And it all works: </p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 600 600' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3966246cdf78088f435c1799a176e3a8'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3966246cdf78088f435c1799a176e3a8)' width='600' height='600' xlink:href='data:image/gif%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAAPoAAAD6AG1e1JrAAAItElEQVR42u1bZ1MjRxDVr3fZVb4qf3D5i/3F5wtkJZAEQiiAACEBIigQRBY557BSu1/vzmpXATjMuVxeTTGlsLOz029ev%2b4e3bkO9g5I%2bv6h8zrb7bq/vSfH9rt7clGVyMndVdWq5OTuogoj4eDuenp4Iid31yGroXM7R4Gj43Nycndd3DySk7vrgf3Ayb0dBdp5QJsBDmdAGwCnA4CS0Mn9H4lgtVJD0lEiKMar90T2axrZxlSe0CvS6%2b9tmFerXbPe89ox1mvvHgbVbisDSLddjpZwzQqEOaZC9la1gyP3VagpqLbbWgD/3JhXM%2bDVAFgn56Yx8js7u%2bTvH6KVlXW6urg2T1kUQNid7a0yFYurtFbapLvbe3OxNmPqADvYP6KlpRItL6/R2elFg4Fox4cn%2bhjuJ8dnjWPeGwCr8ednFxQOJ6ir208eb0hee/sGKDmepkfOr9Ee7h8okZiUa1%2b%2buqmzy0fB0AidnpzbQbDqCP/NzeWoh%2bf62uGhjk4vuXn%2b9bUtuQeAouVyy/y8gIxBd7sDAlaDO34vBsRi42LYxOQ0DQ7FaHZ2UV7n5wvmDuE7GBAIjlA%2bv0zRaFJAGOHXejeATqBtMVsUqNlsjlKpGerpHSCvb5Auzi9lzN7eoXzX5w7S9MwCpTNz1MsA9HF/CxNeB4BW2/2b61vy%2bYeY%2bmE6O7ukWHyCHu4ebL6J8BIMRamrp58KhRWD1sfk9oSozxOkI6Zvw25xm5jICEhgEhrYFBqMMSg%2bKuT1edLprIzBc3VaEA1HRqmTx8zN5Q2mVM11vzsDnp40Cg8nqJuNwyKCvMO75X1T5NBAczcbCoOPDo8NUB4ElO4eP5VKGyal1bwazzsUjgsDoBmqgWVg0tRUVj6Dffi8sFAwx8wwE/BdMjn1nRhQpwGHB8fiz1gsDAVlR8dSdG7QFCIGHwVTzk7Pzd3ETnV0eU0DTQCq0IxHmRPArpW2TOMy0/O6cWAFj4P2YLcLhRpICwtFntdH8cTEN0eCN0eBR15waXWDBgLD3CNCU%2bgArp8cnwoA8F3llzAQO4zFK8GyMuBJ6K67zerKhmncFFMeAExMTMvnCOjOxuZZCFUD9TFmdDTVEF3eTQMaUBUDNBa1MTo%2bOhF69/T28/tTCXfYfXze3tqVsddXN/IdosXO9p49L8BbnjPOLgXjZlkAVQPl8V02q/t3cjyju0Q6a45JJtM8xiv6YHOB99KA%2blAFQYJKwxWwI1BvsABqrCgPOoIV2JW7mzvZJah3/8Cwng9U9UgBPYHLoC0uFo1wGRUd2dosC4sAZHlH1xnEfrge5sHz93YPBFhoy%2bbGtl0EK%2b8MgC5wZxJyvnD8RSjy%2bcNCd%2bxKKjVrsmOfwxXGwaehEdh5oa4RFZBLdLNhnz73scDNGhHmTozHOIkYPL8ubmlhCECD6w0bbqALbVB2H0yRPKEuy3xXDVAdPo6Yj4d6eAFRfi0WS6Q9akYGqIOF3QGtoQ2RyBhnjGt6pDDmg3hhDtEJI4JcXlzRpOQXcdaMhLAERlvnRShGVICmoE9zLtCYZX6vTNCS3z8%2bPPJiM/oCqblYKoU3P7eoE%2bpzfEQNAbRJDaHAkl93Hp%2baj3ktA76pCmxSbVU0oxp7qras9qy73nJMhZoqeLN64aUx/8qhaL2PtfI5U0CbXJdrrb7Xqs/68mvGtA9FnX4m2OxA5UUXsPnTG6j1XBbWVAifuc96YNLs3lbPsorpSxmhq0Fk6lT5LcdlrcQI319dXuvqXqHX32c03Avlr48yzcYjnMo5wgvC6FJCVDFuLHNlp0pYdQDRsFBc0%2bwi1ABktRaOZB5jvcHgsCRTZvXYJMRZzxql2JnPy3lALD5eqzxRA2QXzczTui7M4XYPUC63ZAu34hKGvaq7bLThv1tOMpClqXZ5fmV7AMpWdThBRnZm0tVIfmKxpG1nVPKi1/cjUi%2boHb25upX3G%2btbNMYVpTpug2EqD5BEiZ%2bBpKesAKjoWSnOIlTegHpDH3/KWeSAaQOeDbuauYTLKhhoyKeLzICd7V1OY32cq8dpkBeNhsWHQhEaGopSlIsgNLzi4cjLM5ksjXFN/tPPv9La2qa568jxvZwOIyv8/Y9PkrWtrqzL3Oh41jC/fvjwG%2b3u7tPKcklADHF5jHXNzMyLsThVKu/smYYhYxRmYCyvDUbjrCHHz/vhx1%2b4ENuhfH6J%2bvuHaGAgLEyyVqG2KKAAyDNtMulZTm1XmK4R%2bQ5AXPKD3J6AWbj084R4WJABwWEHdj7KC4HvocBRu4RCqKPTIwkTGhZ5eHBEf37slAWNc53v4XlRO8TiSRkDQHK5In38q4v2ygeU4MKqvLMrBZYVABiFShR0xynTCYPk7x8UW3C2gHPJjk636W6dXR66MlhSiwKaXu4qAAr5ZQOAVZpM6TU4JgWtYLQVAIiMzz8oNMSOgh2grs8fMgG4NQCA66D1MJg4Sv/0uYeWGOTlpVUxGC4QDsdkDMA5YJCwYFwbG5tk39%2bjkZEx%2baxaIDAsJ06Dg1Gh/yk/O8AagyM5ry8kz8Ycyk11AK5rrqCRRQQNANZ5IQWmzQa7wty8XpdjB%2bCvYAAMB20jkYRxHDWvUywQlt3Eg7q7vUzjNXOhiwsFWRBE7GtHnyg5rqt5trfL4kZdfF9pdV3cATVGb69fXCvLYgdDM1z0gD21c4ApAXx8Ii1%2bDvaNj6ekRlEuinsDcmgT5gKu5gJKt1ytYq5V1YW%2bVZLfAOCL8huARRghlFKUGKII8VI1vxJB7JASPAU2QDXnMoRMCquKfq74XDjV11W1pdp6NKuYUc189uWNKZAtRfDZpELTDcOu3N7cNgiJNUEx57CEN2WwdQH13zXc90wSYxuv1a2zYi%2bJrc%2bR93UF3bdVg0Rvqrj%2bF7WAFbm3/Aj53wWgLjNyWm%2bXw20A2gA4HQDHi6DTAVDFkFN7WwPa/1rc8S7QToXbGtD%2bHyOO/h8jONF1cv8b0yUQCGIgQdcAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"600\" alt=\"Number input gif showing how it works.\" data-srcset=\"/writing/assets/static/numberinput.bd6740a.93f2981aeca98f806aca585b80103e83.gif 600w\" data-sizes=\"(max-width: 600px) 100vw, 600px\" data-src=\"/writing/assets/static/numberinput.bd6740a.93f2981aeca98f806aca585b80103e83.gif\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/writing/assets/static/numberinput.bd6740a.93f2981aeca98f806aca585b80103e83.gif\" width=\"600\" alt=\"Number input gif showing how it works.\"></noscript></p>\n<p>If there's a more efficient way to do this please let me know :D </p>\n","date":"September 25, 2019","timeToRead":1,"cover":"https://www.arjunkalburgi.com/writing/assets/static/numberinput.bd6740a.71e096183240d2f2e98fde11a493f589.gif","description":"After accomplishing this twice now on two different occasions, I want to note it down for future reference. I think this is pretty core functionality for number inputs."}},"context":{}}