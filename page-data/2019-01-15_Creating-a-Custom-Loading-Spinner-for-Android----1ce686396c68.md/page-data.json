{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-01-15_Creating-a-Custom-Loading-Spinner-for-Android----1ce686396c68.md/","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"985cf309-5c8b-588a-a790-a2efaebf6554","excerpt":"Recently at Krugo, I was implementing a custom loading animation. I don‚Äôt usually write about work things, but this one was different. First, the¬†Setup First I‚Ä¶","html":"<blockquote>\n<p>Recently at Krugo, I was implementing a custom loading animation. I don‚Äôt usually write about work things, but this one was different.</p>\n</blockquote>\n<h4>First, the¬†Setup</h4>\n<p>First I implemented this BehaviorSubject in my Dependency Injection:</p>\n<p><strong>var progressBar</strong>: BehaviorSubject<Boolean> = BehaviorSubject.createDefault(<strong>false</strong>)<br>\n<strong>fun</strong> setProgressBar(value: Boolean) {<br>\n<strong>progressBar</strong>.onNext(value)<br>\n}</p>\n<p>And subscribed to it from the MainActivity:</p>\n<p>Injector.<strong>progressBar</strong>.<em>subscribeBy</em>(<br>\nonNext = <strong>{<br>\nif</strong> (<strong>it</strong>) {<br>\n<strong>this</strong>.mainProgress.<em>visibility</em> = View.<em>VISIBLE</em> } <strong>else</strong> {<br>\n<strong>this</strong>.mainProgress.<em>visibility</em> = View.<em>GONE</em> }<br>\n<strong>}</strong>,onError = <strong>{}</strong>)<br>\n.<em>addTo</em>(<strong>compositeDisposable</strong>)</p>\n<p>These together allow me to toggle the ProgressBar view (that was set up in activity_main) simply by calling <code class=\"language-text\">Injector.setProgressBar(**true**)</code> and <code class=\"language-text\">Injector.setProgressBar(**false**)</code>.</p>\n<h4>Second, the Animation</h4>\n<p>Here‚Äôs the fun part. I used <a href=\"https://shapeshifter.design/\">Shape Shifter</a> to make the animation, this is what I made:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*TOT7NQcg-4VcfbAynbk7vA.gif\"></p>\n<p>Shape Shifter allows you to export the animation as an <code class=\"language-text\">animated-vector</code>¬†, made just for Android.</p>\n<p>I found that breaking that <code class=\"language-text\">animated-vector</code> into four separate files worked best. The first is the main file, make sure your ProgressBar uses this.</p>\n<p>&#x3C;<strong>animated-vector</strong><br>\nandroid:drawable=‚Äù<strong>@drawable/your_vector_file</strong>‚Äú>  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;**target**  \n    android:name=&quot;group1&quot;  \n    android:animation=&quot;**@anim/your\\_first\\_animation\\_file**&quot; /&gt;  \n\n&lt;**target**  \n    android:name=&quot;group2&quot;  \n    android:animation=&quot;**@anim/your\\_second\\_animation\\_file**&quot; /&gt;  </code></pre></div>\n<p>&#x3C;/<strong>animated-vector</strong>></p>\n<p>The vector file, taken from the <code class=\"language-text\">&lt;vector&gt;</code> section of the <code class=\"language-text\">animated-vector</code>¬†:</p>\n<p>&#x3C;<strong>vector</strong> android:name=‚Äúvector‚Äù<br>\nandroid:viewportWidth=‚Äú1024‚Äù<br>\nandroid:viewportHeight=‚Äú1024‚Äù><br>\n&#x3C;<strong>group</strong> ‚Ä¶ /><br>\n&#x3C;<strong>group</strong> ‚Ä¶ /><br>\n&#x3C;/<strong>vector</strong>></p>\n<p>And the two animation files taken from the <code class=\"language-text\">&lt;target&gt;</code> sections and placed under <code class=\"language-text\">res/anim/</code>¬†. They‚Äôll look like this:</p>\n<p>&#x3C;<strong>set</strong>><br>\n&#x3C;<strong>objectAnimator</strong> ‚Ä¶ /><br>\n&#x3C;<strong>objectAnimator</strong> ‚Ä¶ /><br>\n&#x3C;<strong>objectAnimator</strong> ‚Ä¶ /><br>\n&#x3C;<strong>objectAnimator</strong> ‚Ä¶ /><br>\n&#x3C;/<strong>set</strong>></p>\n<h4>Third, Making it¬†Work</h4>\n<p>This was all great, but it didn‚Äôt exactly work. The animation wouldn‚Äôt repeat itself after it completed. Took a while but finally got it working by doing the following:</p>\n<p>Change <code class=\"language-text\">ProgressBar</code> to <code class=\"language-text\">ImageView</code></p>\n<p>&#x3C;<strong>ImageView</strong><br>\nandroid:contentDescription=‚Äú@string/loading‚Äù<br>\nandroid:id=‚Äù@+id/progress_bar‚Äù<br>\nandroid:layout_width=‚Äú200dp‚Äù<br>\nandroid:layout_height=‚Äú200dp‚Äù<br>\nandroid:layout_gravity=‚Äúcenter‚Äù /></p>\n<p>Initialize the animation including <code class=\"language-text\">registerAnimationCallback</code> to force the looping of the animation.</p>\n<p><strong>val</strong> avd = AnimatedVectorDrawableCompat.create(<em>applicationContext</em>,<br>\nR.drawable.<em>your\\</em>vector_file<em>)<br>\nfindViewById<ImageView>(R.id.</em>progress_bar<em>).</em>apply_ <strong>{</strong> setImageDrawable(avd)<br>\n<strong>}<br>\n**avd?.registerAnimationCallback(</strong>obj<strong>:Animatable2Compat.AnimationCallback() {<br>\n**override fun</strong> onAnimationEnd(drawable: Drawable?) {<br>\navd.start()<br>\n}<br>\n})</p>\n<p>To top it off, I added <code class=\"language-text\">start()</code> and <code class=\"language-text\">stop()</code> to my <code class=\"language-text\">_subscribeBy_</code> method just to be nice:</p>\n<p>Injector.<strong>progressBar</strong>.<em>subscribeBy</em>(<br>\nonNext = <strong>{<br>\nif</strong> (<strong>it</strong>) {<br>\n<strong>this</strong>.mainProgress.<em>visibility</em> = View.<em>VISIBLE</em> avd?<em>.start()</em> } <strong>else</strong> {<br>\n<strong>this</strong>.mainProgress.<em>visibility</em> = View.<em>GONE</em> avd?<em>.stop()</em> }<br>\n<strong>}</strong>,onError = <strong>{}</strong>)<br>\n.<em>addTo</em>(<strong>compositeDisposable</strong>)</p>\n<p>This last step took me a while to figure out but I finally got it thanks to this article from the Android Developers blog:</p>\n<p><a href=\"https://medium.com/androiddevelopers/re-animation-7869722af206\" title=\"https://medium.com/androiddevelopers/re-animation-7869722af206\"><strong>Re-animation</strong><br>\n<em>If you were holding off adding awesome animation to your application because of lack of API support, then hold-off-no-more</em>medium.com</a><a href=\"https://medium.com/androiddevelopers/re-animation-7869722af206\"></a></p>\n<p>Overall I loved the chance to work on some animation, I think it‚Äôs just going to become a bigger thing in 2019 and more of a priority for me to learn!</p>\n<h4>Krugo Travel</h4>\n<p>Quick shoutout to the company I‚Äôm working for, Krugo. I‚Äôm working on getting the Android app up and running hence why I was doing this little animation in Android!</p>\n<blockquote>\n<p>Have you ever been frustrated trying to plan a trip with a group of people? Maybe a bachelor party, family vacation or trip with the girls? If so, you‚Äôre not alone.</p>\n</blockquote>\n<blockquote>\n<p>And we‚Äôve made it our mission to help.</p>\n</blockquote>\n<p>Krugo helps groups of friends collaboratively plan trips by finding events, buying tickets and getting a place to stay. Can‚Äôt wait to take my own Krugo soon üòú</p>\n<p>Check ‚Äôem out on <a href=\"https://medium.com/@krugo\">Medium</a> or get the <a href=\"https://krugotravel.com/\">app for iOS</a>. Android coming soon!</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OoTeOBZ4tF09RWuXkXNihA.jpeg\"></p>","frontmatter":{"title":"Creating a Custom Loading Spinner for Android ü§ñ","date":"January 15, 2019","description":"Recently at Krugo, I was asking to implement a custom loading animation. I don‚Äôt usually write about work things, but this one was‚Ä¶"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-01-15_Creating-a-Custom-Loading-Spinner-for-Android----1ce686396c68.md/","previous":{"fields":{"slug":"/2019-01-13_Stressful-Tasks--a-behavioural-design-experiment-ff59a23bf1e5.md/"},"frontmatter":{"title":"Stressful Tasks, a behavioural design experiment"}},"next":{"fields":{"slug":"/2019-01-20_Getting-more-and-more-used-to-animations----aa7349c82ee2.md/"},"frontmatter":{"title":"Getting more and more used to animations üöÄ"}}}}}