{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-10-25_Using-the-BEM-methodology-for-my-CSS-classifications-a35172f90a04.md/","webpackCompilationHash":"","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"0d2d869a-db3e-5f64-ad02-af3135adcf07","excerpt":"I learned about CSS classification methodologies at the Web Unleashed conference I attended in early October (highly recommend attending if youâ€™re a webâ€¦","html":"<p>I learned about CSS classification methodologies at the Web Unleashed conference I attended in early October (highly recommend attending if youâ€™re a web developer). Using them is the same idea of using proper naming conventions for your property names, file names, and variable names.</p>\n<p>I decided to start with <a href=\"http://getbem.com\">BEM</a>, which stands for Block Element Modifier.</p>\n<p><em>The first time I used it, I got it all wrong and I wanted to write about my lesson.</em></p>\n<p>I assumed that BEM was hierarchical, just like how we usually name variables and properties.</p>\n<p>This led me to produce HTML like this:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*X7MIYOSLNPx05ZZ04UxDUA.jpeg\"></p>\n<p><code class=\"language-text\">st</code> is my Block, <code class=\"language-text\">-tasks__(something)</code> are the Elements and <code class=\"language-text\">--stress</code> and <code class=\"language-text\">--fine</code> the Modifiers of certain elements.</p>\n<p>This improper use led to the problem highlighted in blue in the above picture. Iâ€™ve got three buttons and they have wildly different class names.</p>\n<p>They should be something like: <code class=\"language-text\">st-buttonsomething--stress</code>, <code class=\"language-text\">st-buttonsomething--fine</code>, and<code class=\"language-text\">st-buttonsomething--add</code>. This way I can have a single button style with slight differences in the modifiers.</p>\n<p>The lesson I learned is that Element names donâ€™t come from their position in the HTML but rather their style as a design asset.</p>\n<p>I now have it like this:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*BqMc2OG08PhJ68VEnYWxJw.png\"></p>\n<p>Where elements donâ€™t depend on their position but rather their function and design/look/style.</p>\n<p>I changed the HTML of my buttons, but you can still see that I now have <code class=\"language-text\">st-buttonBg</code> as the Element class and <code class=\"language-text\">st-buttonBg--fine</code> as the Modifier class.</p>\n<p>Thatâ€™s a quick lesson I learned when using BEM. Thanks to <a href=\"http://twitter.com/cssinate\">Paul Grant</a> for helping me learn the lesson and encouraging me to write about it!</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OoTeOBZ4tF09RWuXkXNihA.jpeg\"></p>","frontmatter":{"title":"Using the BEM methodology for my CSS classifications","date":"October 25, 2018","description":"I learned about CSS classification methodologies at the Web Unleashed conference I attended in early October (highly recommend attendingâ€¦"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2018-10-25_Using-the-BEM-methodology-for-my-CSS-classifications-a35172f90a04.md/","previous":{"fields":{"slug":"/2018-10-10_Redesigning-Slackify--an-easy-custom-emoji-solution-for-Slack-41c81b76e2be.md/"},"frontmatter":{"title":"Redesigning Slackify, an easy custom emoji solution for Slack"}},"next":{"fields":{"slug":"/2018-11-06_Do-Animated-SVGs----React-Native--2c6f75149189.md/"},"frontmatter":{"title":"Do Animated SVGs ðŸ’” React-Native?"}}}}}