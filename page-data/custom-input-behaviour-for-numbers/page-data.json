{"componentChunkName":"component---src-templates-blog-post-js","path":"/custom-input-behaviour-for-numbers/","webpackCompilationHash":"21f13828188f21ec96a9","result":{"data":{"site":{"siteMetadata":{"title":"Writing","author":"Arjun Kalburgi"}},"markdownRemark":{"id":"f152773c-b693-583a-b4f1-bd1bc21783e7","excerpt":"After accomplishing this twice now on two different occasions, I want to note it down for future reference. I think this is pretty core functionality for number…","html":"<blockquote>\n<p>After accomplishing this twice now on two different occasions, I want to note it down for future reference. I think this is pretty core functionality for number inputs.</p>\n</blockquote>\n<p>When you type into a currency field, the field should adapt and reflect your text input. The experience is much cleaner if you’re only ever typing numbers. </p>\n<p>Thus this: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// First, remove any '$' or decimals.</span>\n<span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> vallen <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>length\n\n<span class=\"token comment\">// Ensure it is a number</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n   <span class=\"token comment\">// Add a 0 for edge case to ensure: \"$0.04\"</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vallen <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> val <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> val<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  \n   <span class=\"token comment\">// Add the decimal to the correct place</span>\n   <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> vallen <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>vallen <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> vallen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Clean up float and add back '$'</span>\n   output <span class=\"token operator\">=</span> <span class=\"token string\">'$'</span> <span class=\"token operator\">+</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now that I’m writing this, it seems like the line for the fourth comment is redundant. Why am I adding a decimal and then cleaning up the float value? Shouldn’t <code class=\"language-text\">parseFloat(output).toFixed(2)</code> do all the right work? </p>\n<p>But that step is required to ensure the differences between <code class=\"language-text\">&#39;0.04&#39;</code> and <code class=\"language-text\">0.40</code> and <code class=\"language-text\">4.00</code> are all taken care of. :smile: </p>\n<p>It’s actually the final line where the redundancy comes. I use <code class=\"language-text\">parseFloat</code> for the case of <code class=\"language-text\">00.040</code> where there maybe extra zeros present. And  <code class=\"language-text\">toFixed(2)</code> is for the case when <code class=\"language-text\">6.00</code> simplifies to <code class=\"language-text\">6</code>. </p>\n<p>And it all works: </p>\n<img src=\"/writing/f89c343ee9b6878ab67f71bea8d3c728/numberinput.gif\" alt=\"Number input gif showing how it works\" style=\"zoom:50%;\">\n<p>If there’s a more efficient way to do this please let me know :D </p>\n<p><img src=\"https://arjunkalburgi.github.io/assets/Graphics/Backgrounds/leaves-white.jpg\" alt=\"leaves\"></p>","frontmatter":{"title":"Custom Input Behaviour for Numbers","date":"September 25, 2019","description":"After accomplishing this twice now on two different occasions, I want to note it down for future reference. I think this is pretty core functionality for number inputs."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/custom-input-behaviour-for-numbers/","previous":{"fields":{"slug":"/moving-my-blog-to-gatsby/"},"frontmatter":{"title":"Moving my blog to Gatsby"}},"next":null}}}